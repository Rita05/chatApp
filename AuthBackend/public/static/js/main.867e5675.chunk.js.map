{"version":3,"sources":["widgets/templates/authorization/authorization-form.jsx","config.js","widgets/authorization/Api.js","widgets/authorization/actions.js","widgets/authorization/reducer.js","widgets/templates/chat/message-item.jsx","widgets/templates/chat/message-list-form.jsx","widgets/templates/chat/sendmessage-input-form.jsx","widgets/templates/chat/chat-users-list.jsx","widgets/templates/chat/sendmessage-form.jsx","widgets/chat/api.js","widgets/chat/actions.js","widgets/chat/reducer.js","widgets/chat/sendmessage.jsx","widgets/authorization/authorization.jsx","widgets/templates/registration/registration-form.jsx","widgets/registration/Api.js","widgets/registration/ValidationData.js","widgets/registration/actions.js","widgets/registration/reducer.js","widgets/registration/registration.jsx","App.js","serviceWorker.js","index.js","widgets/templates/authorization/authorization.module.css","widgets/templates/registration/registration-form.module.css","widgets/templates/chat/sendmessage-form.module.css","widgets/templates/chat/message-list-form.module.css"],"names":["FIELD_IDS","AuthorizationForm","props","Container","className","Styles","AuthContainer","h3","Form","Group","controlId","Label","Control","defaultValue","login","value","onChange","event","onFieldChanged","target","type","placeholder","password","Button","variant","onClick","onEntranceClicked","onRegistrationRedirect","authLogin","authPassword","a","userData","fetch","config","mode","method","headers","body","JSON","stringify","response","status","TYPES","isАuthorized","serverStatus","authStatus","dispatch","АuthorizationApi","sendForАuthorizationData","initialState","isRegistrationClicked","authorizationReducer","state","action","MessageItem","messageObject","loginCookie","message","ListGroup","Item","Card","bg","text","style","width","Header","Text","Body","MessageForm","MessageFormContent","chatUsersMessages","map","SendMessageInputForm","inputmessage","onMessageChanged","onsendMessageClick","ChatUsersList","useState","usersPhotos","setUsersPhotos","useEffect","ongetPhoto","interval","setInterval","clearInterval","json","photos","console","debug","Style","UsersList","dataUser","Image","src","photo","filename","rounded","ChatForm","name","parts","document","cookie","split","length","pop","shift","getCookie","Row","Col","md","xl","usermsg","credentials","this","ongetMessages","userMessages","messagesFromServer","ChatApi","sendMessage","getMessages","ChatReducer","connect","actions","onsendMessage","ongetMessagesFromInterval","templateProps","log","onLoginChanged","onPasswordChanged","onAuthCheckedClicked","setCookie","cname","cvalue","d","Date","toUTCString","to","fieldId","RegistrationForm","show","setShow","showSendPhoto","setShowSendPhoto","onCloseModal","registryContainer","noValidate","registrationForm","hasValidation","validationLoginMessage","validationPasswordMessage","File","FormControlFile","files","onPhotoSelected","onRegistrationClicked","Modal","size","registrationStatus","onHide","aria-labelledby","centered","closeButton","Title","id","Footer","respSendPhotoStatus","uLogin","uPassword","file","formData","FormData","append","test","isLogindValid","ongetStatus","respStatus","validationMeassage","ValidationData","checkonValidationLogin","validationMessage","checkonValidationPassword","RegistrationApi","sendRegistrationData","sendUserPhoto","registrationReducer","onRegistration","sendPhoto","fileName","App","exact","path","render","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","getElementById","module","exports"],"mappings":"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","file":"static/js/main.867e5675.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { Form, Button, Container } from 'react-bootstrap';\r\nimport Styles from \"./authorization.module.css\"\r\n\r\n\r\nexport const FIELD_IDS = {\r\n  login: \"login\",\r\n  password: \"password\"\r\n}\r\n\r\nconst AuthorizationForm = (props) => {\r\n\r\n  return (\r\n    <Container className={Styles.AuthContainer}>\r\n    <h3 className={Styles.h3}>Вход</h3>\r\n    <Form className={Styles.AuthorizationForm}>\r\n      <Form.Group controlId=\"formBasicLogin\">\r\n        <Form.Label>Логин</Form.Label>\r\n        <Form.Control defaultValue={props.login.value}\r\n          onChange={(event) => props.onFieldChanged(event.target.value, FIELD_IDS.login)} type=\"text\" placeholder=\"Логин\" />\r\n      </Form.Group>\r\n      \r\n      <Form.Group controlId=\"formBasicPassword\">\r\n        <Form.Label>Пароль</Form.Label>\r\n        <Form.Control defaultValue={props.password.value}\r\n          onChange={(event) => props.onFieldChanged(event.target.value, FIELD_IDS.password)} type=\"password\" placeholder=\"Пароль\" />\r\n      </Form.Group>\r\n      {/* <Link to=\"/chart\"> </Link> */}\r\n      <Button variant=\"info\" className={Styles.Button} onClick={props.onEntranceClicked} >\r\n        Вход\r\n      </Button>\r\n      <Button variant=\"info\" className={Styles.Button}  onClick={props.onRegistrationRedirect} >\r\n        Регистрация\r\n      </Button>\r\n    </Form>\r\n    </Container>\r\n  )\r\n}\r\nexport default AuthorizationForm\r\n//TODO: отличие type=\"login\"от type=\"text\"\r\n//TODO: сделать упрощение и передавать объект при изменении данных формы\r\n//TODO: доработать стилями форму(размеры полей ввода, кнопку)\r\n//TODO: подключить базу данных для получения и отправки сообщений \r\n","export default {\r\n    // serverUrl: \"localhost:8080\"\r\n    // serverUrl: \"192.168.31.189:8080\"\r\n    //serverUrl: \"192.168.50.243:8080\"\r\n    serverUrl: \"localhost:8080\"\r\n    \r\n}","import config from \"../../config\"\r\nclass АuthorizationApi{\r\n\r\n    async sendForАuthorizationData(authLogin, authPassword){\r\n        let userData={\r\n            login: authLogin,\r\n            password: authPassword\r\n        }\r\n        let response = await fetch(`http://${config.serverUrl}/authorization`, {\r\n            mode: \"cors\",\r\n            // credentials: 'include',\r\n            method: \"post\",\r\n            headers: {\r\n                'Content-Type': \"application/json\"\r\n            },\r\n            body: JSON.stringify(userData)\r\n        \r\n        });\r\n        return response.status;   \r\n    }\r\n}\r\nexport default new АuthorizationApi();\r\n","\r\nimport АuthorizationApi from \"./Api\"\r\nexport const TYPES = {\r\n\r\n    TYPE_ONCHANGE_FIELD_LOGIN: \"change-login-field\",\r\n    TYPE_ONCHANGE_FIELD_PASSWORD: \"change-password-field\",\r\n    TYPE_ONENTRANCE_CLICKED: \"redirect-on-chat\",\r\n    TYPE_ONREGISTER_CLICKED: \"redirect-on-registration\"\r\n\r\n}\r\n\r\nexport const createActionLoginChanged = (value) => {\r\n    return {\r\n        type: TYPES.TYPE_ONCHANGE_FIELD_LOGIN,\r\n        login: value\r\n    }\r\n}\r\n\r\nexport const createActionPasswordChanged = (value) => {\r\n\r\n    return {\r\n        type: TYPES.TYPE_ONCHANGE_FIELD_PASSWORD,\r\n        password: value\r\n    }\r\n\r\n}\r\nexport const isАuthorized = (serverStatus) => {\r\n    return {\r\n        type: TYPES.TYPE_ONENTRANCE_CLICKED,\r\n        authStatus: serverStatus\r\n    }\r\n}\r\nexport const createActionRedirect = (login, password) => async (dispatch) => {\r\n    let serverStatus = await АuthorizationApi.sendForАuthorizationData(login, password)\r\n    if (serverStatus) {\r\n        dispatch(isАuthorized(serverStatus))\r\n    }\r\n}\r\nexport const createActionRegister = () => {\r\n    return {\r\n        type: TYPES.TYPE_ONREGISTER_CLICKED\r\n    }\r\n}\r\n\r\nexport default {\r\n    createActionLoginChanged,\r\n    createActionPasswordChanged,\r\n    createActionRedirect,\r\n    createActionRegister\r\n}\r\n","import { Reducer } from 'redux'\r\nimport { TYPES } from './actions'\r\n\r\nexport const initialState = {\r\n    login: '',\r\n    password: '',\r\n    // isClicked: false,\r\n    authStatus: 0,\r\n    isRegistrationClicked: false\r\n\r\n}\r\n\r\nexport const authorizationReducer = (state=initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case TYPES.TYPE_ONCHANGE_FIELD_LOGIN:\r\n            return {\r\n                ...state,\r\n                login: action.login\r\n            }\r\n        case TYPES.TYPE_ONCHANGE_FIELD_PASSWORD:\r\n            return {\r\n                ...state,\r\n                password: action.password\r\n            }\r\n        case TYPES.TYPE_ONENTRANCE_CLICKED:\r\n            return{\r\n                ...state,\r\n                // isClicked: true\r\n                authStatus: action.authStatus\r\n            }\r\n        case TYPES.TYPE_ONREGISTER_CLICKED:\r\n            return{\r\n                ...state,\r\n                isRegistrationClicked: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default authorizationReducer\r\n","import * as React from \"react\";\r\nimport { ListGroup, Card } from 'react-bootstrap';\r\n\r\nconst MessageItem = ({ messageObject , loginCookie}) => {\r\n    const { login, message } = messageObject\r\n\r\n    return (\r\n        <ListGroup.Item\r\n            className={`${login === loginCookie ? 'd-flex justify-content-end' : 'd-flex justify-content-start'}`}\r\n        >\r\n            <Card\r\n                // bg={'info'}\r\n                bg ={`${login === loginCookie ? 'info' : 'primary'}`}\r\n                text='light'\r\n                style={{ width: '55%'}}\r\n            >\r\n                <Card.Header className='d-flex justify-content-between align-items-center'>\r\n                    <Card.Text className='small' />\r\n                    <Card.Text>{login}</Card.Text>\r\n                </Card.Header>\r\n                <Card.Body className='d-flex justify-content-between align-items-center'>\r\n                    <Card.Text>{message}</Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        </ListGroup.Item>\r\n    )\r\n\r\n\r\n}\r\nexport default MessageItem\r\n//TODO:залить на github проект, \r\n//TODO: доделать то, с кем я буду чатиться(плюс загрузка аватарки)\r\n//TODO: //потом усложнить token для отправки запросов пользователей, подключить базу\r\n//TODO: //прочитать про классы  в javascript(ООП)\r\n","import * as React from \"react\";\r\nimport {ListGroup } from 'react-bootstrap';\r\nimport MessageItem from \"./message-item\"\r\nimport Styles from \"./message-list-form.module.css\"\r\n\r\n\r\nconst MessageForm = (props) => {\r\n    return (\r\n        <>\r\n\r\n            <ListGroup variant=\"flush\" className={Styles.MessageFormContent}>\r\n                {props.chatUsersMessages.map((messageObject) =>(\r\n                     <MessageItem messageObject={messageObject} loginCookie={props.loginCookie}/>\r\n                ))}\r\n            </ListGroup>\r\n        </>\r\n    )\r\n}\r\nexport default MessageForm\r\n","import * as React from \"react\";\r\nimport { Form, Button } from 'react-bootstrap';\r\n\r\n\r\n\r\nconst SendMessageInputForm = (props) => {\r\n    return (\r\n        <Form>\r\n            <Form.Group className=\"d-flex\">\r\n                <Form.Control defaultValue={props.inputmessage.value}\r\n                    onChange={(event) => props.onMessageChanged(event.target.value)} type=\"text\" placeholder=\"Введите соообщение\" />\r\n\r\n                <Button variant=\"info\" onClick={props.onsendMessageClick}>\r\n                    Отправить\r\n                 </Button>\r\n            </Form.Group>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default SendMessageInputForm\r\n\r\n","import * as React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { ListGroup, Image } from 'react-bootstrap';\r\nimport Style from './sendmessage-form.module.css'\r\n\r\nimport config from \"../../../config\"\r\n\r\n\r\nconst ChatUsersList = () => {\r\n    // Загрузка зарегистрированных пользователей и их отображение\r\n    // const [registeredUsers, setRegisteredUsers] = useState([])\r\n\r\n    // const usersPhotos = [];\r\n\r\n    // useEffect(() => {\r\n    //     loadUsers();\r\n    //     ongetPhoto()\r\n    //     const interval = setInterval(() => {\r\n    //         loadUsers();\r\n    //     }, 5000)\r\n    //     return () => clearInterval(interval)\r\n    // }, [])\r\n\r\n    // const loadUsers = async () => {\r\n    //     const response = await fetch(`http://${config.serverUrl}/users`)\r\n    //     const users = await response.json()\r\n    //     setRegisteredUsers(users)\r\n    //     console.debug(\"Loading list of users ...\")\r\n\r\n    // }\r\n     // Загрузка зарегистрированных пользователей и их фотографий и их отображение\r\n    const [usersPhotos, setUsersPhotos] = useState([])\r\n\r\n    useEffect(() => {\r\n        ongetPhoto();\r\n        const interval = setInterval(() => {\r\n            ongetPhoto();\r\n        }, 5000)\r\n        return () => clearInterval(interval)\r\n\r\n    }, [])\r\n\r\n    const ongetPhoto = async () => {\r\n        const response = await fetch(`http://${config.serverUrl}/photo`)\r\n        const photos = await response.json()\r\n        setUsersPhotos(photos)\r\n        console.debug(\"Loading users avatars ...\")\r\n    }\r\n    // loadUsers -> setRegisteredUsers -> loadUsers -> setRegisteredUsers ....\r\n\r\n    return (\r\n\r\n\r\n        <ListGroup className={Style.UsersList} >\r\n\r\n            {/* const Photo = usersPhotos.map((el) =>\r\n            <Image src={el.photo} rounded />\r\n            ); */}\r\n\r\n            {/* {registeredUsers.map((chatUser) =>\r\n                <ListGroup.Item>\r\n                    <Image src=\"#\" rounded />\r\n                    {chatUser}\r\n                </ListGroup.Item>\r\n            )} */}\r\n\r\n            { usersPhotos.map((dataUser)=>\r\n            <ListGroup.Item>\r\n                    {/* <Image src={chatUser.photo.path} rounded /> */}\r\n                    <Image src={`http://localhost:8080/uploads/${dataUser.photo.filename}`} rounded className={Style.Image}/>\r\n                    {dataUser.login}\r\n                </ListGroup.Item>\r\n            )}\r\n        </ListGroup>\r\n    )\r\n\r\n}\r\n\r\nexport default ChatUsersList\r\n\r\n\r\n","import * as React from \"react\";\r\nimport { Card, Container, Row, Col } from 'react-bootstrap';\r\nimport MessageForm from \"./message-list-form\"\r\nimport SendMessageInputForm from \"./sendmessage-input-form\"\r\nimport ChatUsersList from \"./chat-users-list\"\r\n\r\nconst ChatForm = (props) => {\r\n\r\n    //const arrayMessages = props.chatMessages.map(message => )\r\n    const getCookie = (name) => {\r\n        const value = `; ${document.cookie}`;\r\n        const parts = value.split(`; ${name}=`);\r\n        if (parts.length === 2) return parts.pop().split(';').shift();\r\n    }\r\n    var loginCookie = getCookie('login')\r\n\r\n    return (\r\n        <Card className=\"grey lighten-3 chat-room\">\r\n            <Card.Body>\r\n            <Row className=\"px-lg-2 px-2\">\r\n                <Col md=\"6\" xl=\"4\" className=\"px-0 mb-4 mb-md-0\">\r\n                    <ChatUsersList chatUsersMessages={props.chatUsersMessages}/>\r\n                </Col>\r\n                {/* <Container className={Style.ChatContainer}> */}\r\n                    <Col md=\"6\" xl=\"8\" className=\"pl-md-3 mt-4 mt-md-0 px-lg-auto\">\r\n                        <MessageForm chatUsersMessages={props.chatUsersMessages} loginCookie={loginCookie} />\r\n                        <SendMessageInputForm inputmessage={props.inputmessage} onsendMessageClick={props.onsendMessageClick}\r\n                            onMessageChanged={props.onMessageChanged} />\r\n                    </Col>\r\n                {/* </Container> */}\r\n            </Row>\r\n            </Card.Body>\r\n        </Card>\r\n        // <Container className={Style.ChatContainer}> \r\n        // <Form>\r\n        //     <Form.Group controlId=\"formInput\">\r\n        //         <Form.Label>Сообщение</Form.Label>\r\n        //         <Form.Control defaultValue={props.inputmessage.value}\r\n        //             onChange={(event) => props.onMessageChanged(event.target.value)} type=\"text\" placeholder=\"Введите соообщение\" />\r\n        //     </Form.Group>\r\n        //     <Form.Group controlId=\"formTextarea\">\r\n        //         <Form.Label>Содержание чата</Form.Label>\r\n        //         <Form.Control as=\"textarea\" rows={3} defaultValue={props.chatUsersMessages.map(messageObject=>messageObject.login + \"\\n\" \r\n        //                         + messageObject.message+\"\\n\")} />\r\n        //     </Form.Group>\r\n        //     <Button variant=\"info\" onClick={props.onsendMessageClick}>\r\n        //         Отправить\r\n        //     </Button>\r\n        // </Form>\r\n        // </Container>\r\n    )\r\n}\r\nexport default ChatForm\r\n//TODO: доработать стили для формы(размеры полей ввода, кнопку)\r\n\r\n","\r\nimport config from \"../../config\"\r\nclass ChatApi {\r\n\r\n    async sendMessage(message) {\r\n\r\n        const usermsg = {\r\n            message: message,             \r\n        }\r\n        let response = await fetch(`http://${config.serverUrl}/messages`, {\r\n            mode: \"cors\",\r\n            // credentials: 'include',\r\n            credentials: 'same-origin',\r\n            method: \"post\",\r\n            headers: {\r\n                'Content-Type': \"application/json\",\r\n                'Access-Control-Allow-Origin': \"*\", \r\n                'Token': this.getCookie('login')\r\n            },\r\n            body: JSON.stringify(usermsg)\r\n        \r\n        });\r\n        return await response.json();        \r\n    }\r\n    \r\n    getCookie(name) {\r\n        const value = `; ${document.cookie}`;\r\n        const parts = value.split(`; ${name}=`);\r\n        if (parts.length === 2) return parts.pop().split(';').shift();\r\n    }\r\n\r\n    async getMessages(){\r\n\r\n        let response = await fetch(`http://${config.serverUrl}/messages`);\r\n        return await response.json();\r\n        \r\n    }\r\n    \r\n\r\n}\r\nexport default new ChatApi();\r\n\r\n\r\n","\r\nimport ChatApi from \"./api\"\r\n\r\nexport const TYPES = {\r\n\r\n    TYPE_ONCHANGE_MESSAGE: \"change-input-message\",\r\n    TYPE_ONGET_MESSAGES: \"get-array-messages\"\r\n    // TYPE_ON_GET_CHAT_PHOTO: \"get-chat-user-photo\"\r\n}\r\n\r\n\r\nexport const onMessageChangedAction = (value) => {\r\n    return {\r\n        type: TYPES.TYPE_ONCHANGE_MESSAGE,\r\n        inputmessage: value\r\n    }\r\n\r\n}\r\nconst ongetMessages = (userMessages) => {\r\n    return {\r\n        type: TYPES.TYPE_ONGET_MESSAGES,\r\n        messagesFromServer: userMessages\r\n    }\r\n}\r\n\r\n// const onPostPhoto = (responseUserPhoto)=>{\r\n//     return{\r\n//         type: TYPES.TYPE_ON_GET_CHAT_PHOTO,\r\n//         responseUserPhoto: responseUserPhoto\r\n//     }\r\n// }\r\n\r\nexport const ongetMessagesAction = () => async (dispatch) => {\r\n    let response = await ChatApi.getMessages();\r\n    if (response) {\r\n        dispatch(ongetMessages(response));\r\n    }\r\n}\r\nexport const onMessageSendAction = (message) => async (dispatch) => {\r\n\r\n    let response = await ChatApi.sendMessage(message);\r\n    if (response) {\r\n        dispatch(ongetMessages(response));\r\n    }\r\n    // let result=await response.json()\r\n    // if (result){\r\n    //     dispatch(ongetMessages(result))\r\n    // }\r\n}\r\n\r\n// export const ongetPhotoAction = () => async (dispatch) => {\r\n\r\n//     let responseUserPhoto = await ChatApi.getUserPhoto()\r\n//     if (responseUserPhoto) {\r\n//         dispatch(onPostPhoto(responseUserPhoto))\r\n//     }\r\n\r\n// }\r\n\r\nexport default {\r\n    onMessageChangedAction,\r\n    onMessageSendAction,\r\n    ongetMessagesAction\r\n    // ongetPhotoAction\r\n}\r\n\r\n","import { Reducer } from 'redux'\r\nimport { TYPES } from \"./actions\"\r\n\r\n\r\nexport const initialState = {\r\n    inputmessage: \"\",\r\n    //chatMessages: [{ message: \"\" }]\r\n    chatUsersMessages: [{login: \"\", message: \"\"}]\r\n    // usersPhotos: [{login: \"\", photo: \"\"}]\r\n\r\n}\r\n\r\nconst formatMessages = messages => messages.map(m => { return { message: m } })\r\n\r\nexport const ChatReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case TYPES.TYPE_ONCHANGE_MESSAGE:\r\n            return {\r\n                ...state,\r\n                inputmessage: action.inputmessage\r\n            }\r\n        case TYPES.TYPE_ONGET_MESSAGES:\r\n            return {\r\n                ...state,\r\n                chatUsersMessages: action.messagesFromServer,\r\n                inputmessage: \"\"\r\n                //chatMessages: action.messagesFromServer.map(m => { return { message: m } })\r\n                // chatMessages: formatMessages(action.messagesFromServer) // [...state.chatMessages, {message: action.inputmessage}]\r\n            }\r\n        // case TYPES.TYPE_ON_GET_CHAT_PHOTO:\r\n        //     return{\r\n        //         ...state,\r\n        //         usersPhotos: action.responseUserPhoto\r\n\r\n        //     }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default ChatReducer\r\n\r\n\r\n","import * as React from \"react\"\r\nimport { useEffect } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport ChatForm from \"../templates/chat/sendmessage-form\"\r\nimport actions from \"./actions\"\r\nimport ChatReducer from \"./reducer\"\r\n\r\nvar isUpdateIntervalStarted = false;\r\n\r\nexport const ChatPage = (props) => {\r\n\r\n    // if (!isUpdateIntervalStarted) {\r\n    //     console.debug(\"Update starting...\")\r\n    //     setInterval(() => {\r\n    //         props.onsendMessage(props.inputmessage)\r\n    //         console.debug(\"Messages loading\")\r\n    //     }, 5000)\r\n    //     isUpdateIntervalStarted = true;\r\n    // }\r\n\r\n    // if (props.chatUsersMessagest.message!==\"\") {\r\n    //     console.debug(\"Update starting...\")\r\n    //     setInterval(() => {\r\n    //         props.onsendMessage(props.inputmessage)\r\n    //         console.debug(\"Messages loading\")\r\n    //     }, 5000)\r\n    //     // isUpdateIntervalStarted = true;\r\n    // }\r\n\r\n    useEffect(() => {\r\n\r\n        props.ongetMessagesFromInterval()\r\n        // props.ongetPhoto()\r\n\r\n\r\n        const interval = setInterval(() => {\r\n            props.ongetMessagesFromInterval()\r\n            console.debug(\"Messages loading\")\r\n        }, 5000)\r\n        return () => clearInterval(interval)\r\n        // props.ongetMessagesFromInterval();\r\n\r\n    }, [])\r\n\r\n    const onsendMessageClick = () => {\r\n        console.log(props.inputmessage)\r\n        // props.onsendMessage(props.inputmessage, props.login)\r\n        if (props.inputmessage !== \"\") {\r\n            props.onsendMessage(props.inputmessage)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const templateProps = {\r\n        inputmessage: props.inputmessage,\r\n        chatUsersMessages: props.chatUsersMessages,\r\n        // usersPhotos: props.usersPhotos,\r\n        onMessageChanged: props.onMessageChanged,\r\n        onsendMessage: props.onsendMessage,\r\n        ongetMessagesFromInterval: props.ongetMessagesFromInterval,\r\n        // ongetPhoto: props.ongetPhoto,\r\n        onsendMessageClick\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                <ChatForm {...templateProps} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ...state.ChatReducer,\r\n        // login: state.authorizationReducer.login\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onMessageChanged: value => dispatch(actions.onMessageChangedAction(value)),\r\n        onsendMessage: message => dispatch(actions.onMessageSendAction(message)),\r\n        ongetMessagesFromInterval: () => dispatch(actions.ongetMessagesAction())\r\n        // ongetPhoto: () => dispatch(actions.ongetPhotoAction())\r\n        \r\n\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatPage)\r\n\r\n","import * as React from \"react\"\r\nimport AuthorizationForm, { FIELD_IDS } from \"../templates/authorization/authorization-form\"\r\nimport { connect } from 'react-redux'\r\nimport actions from \"./actions\"\r\nimport authorizationReducer from \"./reducer\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport ChatPage from \"../chat/sendmessage\"\r\n\r\nexport const Authorization = (props) => {\r\n\r\n    const onFieldChanged = (value, fieldId) => {\r\n        switch (fieldId) {\r\n            case FIELD_IDS.login:\r\n                props.onLoginChanged(value);\r\n                console.log(props.login);\r\n                break;\r\n            case FIELD_IDS.password:\r\n                props.onPasswordChanged(value);\r\n                console.log(props.password);\r\n                break;\r\n        }\r\n    }\r\n    const onEntranceClicked = () => {\r\n        props.onAuthCheckedClicked(props.login, props.password)\r\n    }\r\n    const setCookie = async (cname, cvalue) => {\r\n        var d = new Date();\r\n        // d.setTime(d.getTime() + (60 * 1000));\r\n        var expires = d.toUTCString();\r\n        // document.cookie = `${cname} = ${cvalue}; expires=${expires}; path=\"/\" `\r\n        document.cookie = `${cname} = ${cvalue}; path=\"/\" `\r\n    }\r\n\r\n    // if (props.isClicked) {\r\n    //     setCookie(\"login\", props.login)\r\n    //     return <Redirect to='/chat' />\r\n    // }\r\n    \r\n    if (props.authStatus === 200) {\r\n        setCookie(\"login\", props.login)\r\n        return <Redirect to='/chat' />\r\n    }\r\n    else if (props.authStatus === 401) {\r\n        return <Redirect to='/registration' />\r\n    }\r\n\r\n    if (props.isRegistrationClicked) {\r\n        return <Redirect to='/registration' />\r\n    }\r\n\r\n\r\n    const templateProps = {\r\n        login: props.login,\r\n        password: props.password,\r\n        onFieldChanged,\r\n        onEntranceClicked,\r\n        onRegistrationRedirect: props.onRegistrationRedirect\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {\r\n                <AuthorizationForm {...templateProps} />\r\n            }\r\n        </>\r\n    )\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ...state.authorizationReducer\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        onLoginChanged: (value) => dispatch(actions.createActionLoginChanged(value)),\r\n        onPasswordChanged: (value) => dispatch(actions.createActionPasswordChanged(value)),\r\n        onAuthCheckedClicked: (login, password) => dispatch(actions.createActionRedirect(login, password)),\r\n        onRegistrationRedirect: () => dispatch(actions.createActionRegister())\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Authorization)\r\n//TODO: проверка что регистрация выполнилась\r\n//TODO: проверка с токеном \r\n//TODO: попробовать token через jwttoken\r\n//TODO: изучить сокеты ","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Form, Button, Container } from 'react-bootstrap';\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Styles from \"./registration-form.module.css\"\r\n\r\n\r\nexport const FIELD_IDS = {\r\n  login: \"login\",\r\n  password: \"password\"\r\n}\r\n\r\n\r\nconst RegistrationForm = (props) => {\r\n\r\n  const [show, setShow] = useState(true)\r\n  const [showSendPhoto, setShowSendPhoto] = useState(true)\r\n\r\n  const onCloseModal = () => setShow(!show);\r\n  const onCloseSendPhoto = () => setShowSendPhoto(!showSendPhoto)\r\n\r\n  const onPhotoSelected = (event) => {\r\n    if (event.target.files.length) {\r\n      props.onPhotoSelected(event.target.files[0]);\r\n\r\n    }\r\n  }\r\n\r\n  return (\r\n      <Container className={Styles.registryContainer}>\r\n        <h3 className={Styles.h3}>Регистрация</h3>\r\n          <Form noValidate className={Styles.registrationForm}>\r\n            <Form.Group controlId=\"formBasicLogin\" hasValidation>\r\n              <Form.Label>Логин</Form.Label>\r\n              <Form.Control defaultValue={props.login.value}\r\n                onChange={(event) => props.onFieldChanged(event.target.value, FIELD_IDS.login)} type=\"text\" placeholder=\"Логин\" />\r\n              {/* {errors.login && touched.login && <div>{errors.login} </div>} */}\r\n              <Form.Text className=\"text-muted\">{props.validationLoginMessage} </Form.Text>\r\n              {/* <Form.Control.Feedback type={\"invalid\"} /> */}\r\n            </Form.Group>  \r\n\r\n            <Form.Group controlId=\"formBasicPassword\" hasValidation>\r\n              <Form.Label>Пароль</Form.Label>\r\n              <Form.Control defaultValue={props.password.value}\r\n                onChange={(event) => props.onFieldChanged(event.target.value, FIELD_IDS.password)} type=\"password\" placeholder=\"Пароль\" />\r\n                {/* {errors.password && touched.password && <div>{errors.password} </div>} */}\r\n              <Form.Text className=\"text-muted\">{props.validationPasswordMessage} </Form.Text>\r\n              {/* <Form.Control.Feedback type={props.validationPasswordMessage === \"\" ? \"valid\" : \"invalid\"} /> */}\r\n            </Form.Group>\r\n            {/* <Link to=\"/chart\"> </Link> */}\r\n            <Form.File className={Styles.FormControlFile} onChange={onPhotoSelected} name=\"image\" />\r\n            <Button variant=\"info\" onClick={props.onRegistrationClicked} >\r\n              Зарегистрироваться\r\n            </Button>\r\n          </Form>\r\n        <Modal\r\n          size=\"sm\"\r\n          show={(props.registrationStatus !== 400) || !show ? false : true}\r\n          onHide={onCloseModal}\r\n          aria-labelledby=\"example-modal-sizes-title-sm-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id=\"example-modal-sizes-title-sm\">\r\n              Oшибка Регистрации\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>Такой пользователь {props.login} уже существует</Modal.Body>\r\n          <Modal.Footer>\r\n            {/* <Button variant=\"info\" onClick={()=>setShow(!show)}> */}\r\n            <Button variant=\"info\" onClick={onCloseModal}>\r\n              закрыть\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <Modal\r\n          size=\"sm\"\r\n          show={(props.respSendPhotoStatus !== 500) || !showSendPhoto ? false : true}\r\n          onHide={onCloseModal}\r\n          aria-labelledby=\"example-modal-sizes-title-sm-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id=\"example-modal-sizes-title-sm\">\r\n              Oшибка Регистрации\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>Ошибка загрузки фото пользователя {props.login}</Modal.Body>\r\n          <Modal.Footer>\r\n            {/* <Button variant=\"info\" onClick={()=>setShow(!show)}> */}\r\n            <Button variant=\"info\" onClick={onCloseSendPhoto}>\r\n              закрыть\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </Container>\r\n  )\r\n}\r\nexport default RegistrationForm\r\n//TODO: отличие type=\"login\"от type=\"text\"\r\n//TODO: сделать упрощение и передавать объект при изменении данных формы\r\n//TODO: доработать стилями форму(размеры полей ввода, кнопку)\r\n//TODO: подключить базу данных для получения и отправки сообщений \r\n","\r\nimport config from \"../../config\"\r\nclass RegistrationApi {\r\n    async sendRegistrationData(uLogin, uPassword) {\r\n        let userData = {\r\n            login: uLogin,\r\n            password: uPassword\r\n        }\r\n        let response = await fetch(`http://${config.serverUrl}/registration`, {\r\n            mode: \"cors\",\r\n            // credentials: 'include',\r\n            method: \"post\",\r\n            headers: {\r\n                'Content-Type': \"application/json\"\r\n            },\r\n            body: JSON.stringify(userData)\r\n\r\n        });\r\n        return response.status;\r\n    }\r\n    async sendUserPhoto(file, login) {\r\n        var formData = new FormData();\r\n        // formData.append(\"login\", login)\r\n        formData.append(\"image\", file)\r\n\r\n        let response = await fetch(`http://${config.serverUrl}/photo/?login=${login}`, {\r\n            // mode: \"cors\",\r\n            method: \"post\",\r\n            headers: {\r\n               // 'Content-Type': \"application/json\",\r\n                // 'Access-Control-Allow-Origin': \"*\", \r\n                // 'Accept': 'application/json',\r\n                // 'Content-Type': \"multipart/form-data\"\r\n            },\r\n            body: formData\r\n        });\r\n\r\n        console.log(response.status)\r\n        return response.status;\r\n        \r\n    }\r\n}\r\nexport default new RegistrationApi();\r\n\r\n\r\n","\r\nclass ValidationData {\r\n\r\n    checkonValidationPassword (value){\r\n        // let pattern = /(?=.*[0-9])(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!@#$%^&*]{8,15}/;\r\n        // var pattern = /(?=.*[0-9])(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z])/;\r\n        // var pattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^\\w\\s])/;\r\n        var pattern = /^(?=.*[a-z])(?=.[A-Z]*)(?=.[0-9]*)(?=.[^\\w\\s]*)/;\r\n        var isPasswordValid = pattern.test(value)\r\n        // var isPasswordValid = value.match(pattern)\r\n\r\n        if(!isPasswordValid){\r\n            return \"Недопустимый символ, не латинская буква, цифра или спецсимвол\"\r\n        }else if(value.length < 8){\r\n            return \"Короткий пароль, менее 8 символов\"\r\n        }else if (value.length > 15){\r\n            return \"Слишком длинный пароль, более 8 символов\"\r\n        }else {\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n    checkonValidationLogin (value){\r\n        var pattern =/^[a-zA-Z0-9]+$/;\r\n        var isLogindValid = pattern.test(value)\r\n        if (isLogindValid){\r\n            return \"\"\r\n        }else if(!isLogindValid){\r\n            return \"Недопустимый символ, не латинская буква или цифра\"\r\n        }\r\n\r\n        return isLogindValid\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default new ValidationData();\r\n","import RegistrationApi from \"./Api\"\r\nimport ValidationData from \"./ValidationData\"\r\nexport const TYPES = {\r\n\r\n    TYPE_ONCHANGE_FIELD_LOGIN: \"change-login-field\",\r\n    TYPE_ONCHANGE_FIELD_PASSWORD: \"change-password-field\",\r\n    TYPE_ONREGISTER_CLICKED: \"server-message-registration\",\r\n    TYPE_ON_GET_PHOTO: \"user-profile-photo\"\r\n\r\n\r\n}\r\n\r\nexport const createActionLoginChanged = (value) => {\r\n    var validationMeassage = ValidationData.checkonValidationLogin(value)\r\n    return {\r\n        type: TYPES.TYPE_ONCHANGE_FIELD_LOGIN,\r\n        login: value,\r\n        validationLoginMessage: validationMeassage\r\n    }\r\n}\r\n\r\nexport const createActionPasswordChanged = (value) => {\r\n    var validationMessage = ValidationData.checkonValidationPassword(value)\r\n    return {\r\n        type: TYPES.TYPE_ONCHANGE_FIELD_PASSWORD,\r\n        password: value,\r\n        validationPasswordMessage: validationMessage\r\n    }\r\n\r\n}\r\n\r\nexport const ongetStatus=(respStatus)=>{\r\n    return{\r\n        type: TYPES.TYPE_ONREGISTER_CLICKED,\r\n        serverStatus: respStatus\r\n    }\r\n}\r\nexport const ongetPhoto=(respSendPhotoStatus)=>{\r\n    return{\r\n        type: TYPES.TYPE_ON_GET_PHOTO,\r\n        respSendPhotoStatus: respSendPhotoStatus\r\n    }\r\n}\r\n\r\nexport const createActionRegisterUser=(login, password)=>async(dispatch)=>{\r\n\r\n    let respStatus= await RegistrationApi.sendRegistrationData(login, password)\r\n    if (respStatus){\r\n        dispatch(ongetStatus(respStatus))\r\n    }\r\n}\r\n\r\nexport const createActionOnGetPhoto=(file, login)=>async(dispatch)=>{\r\n    let respSendPhotoStatus=await RegistrationApi.sendUserPhoto(file, login)\r\n    if (respSendPhotoStatus){\r\n        dispatch(ongetPhoto(respSendPhotoStatus))\r\n    }\r\n    \r\n}\r\n\r\nexport default {\r\n    createActionLoginChanged,\r\n    createActionPasswordChanged,\r\n    createActionRegisterUser,\r\n    createActionOnGetPhoto,\r\n    ongetStatus\r\n    \r\n}","import { TYPES } from './actions'\r\n\r\nexport const initialState = {\r\n    login: '',\r\n    password: '',\r\n    registrationStatus: 0,\r\n    respSendPhotoStatus: 0,\r\n    validationLoginMessage: \"\",\r\n    validationPasswordMessage: \"\"\r\n\r\n}\r\n\r\nexport const registrationReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case TYPES.TYPE_ONCHANGE_FIELD_LOGIN:\r\n            return {\r\n                ...state,\r\n                login: action.login,\r\n                validationLoginMessage: action.validationLoginMessage\r\n            }\r\n        case TYPES.TYPE_ONCHANGE_FIELD_PASSWORD:\r\n            return {\r\n                ...state,\r\n                password: action.password,\r\n                validationPasswordMessage: action.validationPasswordMessage\r\n            }\r\n        case TYPES.TYPE_ONREGISTER_CLICKED:\r\n            return {\r\n                ...state,\r\n                registrationStatus: action.serverStatus\r\n            }\r\n        case TYPES.TYPE_ON_GET_PHOTO:\r\n            return{\r\n                ...state,\r\n                respSendPhotoStatus: action.respSendPhotoStatus\r\n            }\r\n        default:\r\n            return state\r\n    } \r\n}\r\n\r\nexport default registrationReducer","import * as React from \"react\"\r\nimport RegistrationForm, { FIELD_IDS } from \"../templates/registration/registration-form\"\r\nimport { connect } from 'react-redux'\r\nimport actions from \"./actions\"\r\nimport registrationReducer from \"./reducer\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport ChatPage from \"../chat/sendmessage\"\r\n\r\n\r\nexport const Registration = (props) => {\r\n\r\n    const onFieldChanged = (value, fieldId) => {\r\n        switch (fieldId) {\r\n            case FIELD_IDS.login:\r\n                props.onLoginChanged(value);\r\n                console.log(props.login);\r\n                break;\r\n            case FIELD_IDS.password:\r\n                props.onPasswordChanged(value);\r\n                console.log(props.password);\r\n                break;\r\n        }\r\n    }\r\n    const onRegistrationClicked = () => {\r\n        props.onRegistration(props.login, props.password)\r\n    }\r\n\r\n    // if (props.registrationStatus === 200) {\r\n    //     return <Redirect from=\"/registration\" to='/' />\r\n    // }\r\n\r\n    const onPhotoSelected=(fileName)=>{\r\n       props.sendPhoto(fileName, props.login)\r\n    }\r\n\r\n    console.log(props.respSendPhotoStatus)\r\n\r\n    const templateProps = {\r\n        login: props.login,\r\n        password: props.password,\r\n        registrationStatus: props.registrationStatus,\r\n        respSendPhotoStatus: props.respSendPhotoStatus,\r\n        validationPasswordMessage: props.validationPasswordMessage,\r\n        validationLoginMessage: props.validationLoginMessage,\r\n        onFieldChanged,\r\n        onRegistrationClicked,\r\n        onPhotoSelected\r\n    \r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                <RegistrationForm {...templateProps} />\r\n            }\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ...state.registrationReducer\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        onLoginChanged: (value) => dispatch(actions.createActionLoginChanged(value)),\r\n        onPasswordChanged: (value) => dispatch(actions.createActionPasswordChanged(value)),\r\n        onRegistration: (login, password) => dispatch(actions.createActionRegisterUser(login, password)),\r\n        sendPhoto: (file, login) => dispatch(actions.createActionOnGetPhoto(file, login))\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Registration)\r\n\r\n","import React from 'react'\nimport {Switch, Router, Route, BrowserRouter, Redirect} from \"react-router-dom\"\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css'\nimport Authorization from \"./widgets/authorization/authorization\"\nimport ChatPage from \"./widgets/chat/sendmessage\"\nimport Registration from \"./widgets/registration/registration\"\n\n\nconst App = () => {\n  return (\n    <>\n        <Route exact path=\"/\" render={()=><Authorization />} />\n        {/* <Route path='/chart' render={()=><WithUrlChatPage/>}></Route> */}\n        <Route path=\"/chat\" render={()=><ChatPage/>} />\n        <Route path=\"/registration\" render={()=><Registration/>} />\n    </>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'\nimport { combineReducers, createStore, applyMiddleware} from \"redux\"\nimport { Provider } from 'react-redux'\nimport authorizationReducer from \"./widgets/authorization/reducer\"\nimport ChatReducer from \"./widgets/chat/reducer\"\nimport registrationReducer from \"./widgets/registration/reducer\"\nimport { BrowserRouter } from 'react-router-dom';\nimport thunkMiddleware from \"redux-thunk\";\n\n\nconst rootReducer = combineReducers({\n  authorizationReducer,\n  ChatReducer,\n  registrationReducer\n\n})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}><App /></Provider>\n  </BrowserRouter>, document.getElementById('root')\n\n);\n//serviceWorker.unregister()\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"authorizationForm\":\"authorization_authorizationForm__dHqJl\",\"AuthContainer\":\"authorization_AuthContainer__-MAUl\",\"h3\":\"authorization_h3__2fgfG\",\"Button\":\"authorization_Button__2cWxk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registrationForm\":\"registration-form_registrationForm__2ipgp\",\"registryContainer\":\"registration-form_registryContainer__2gyhk\",\"h3\":\"registration-form_h3__1UFgq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatContainer\":\"sendmessage-form_ChatContainer__30JS3\",\"UsersList\":\"sendmessage-form_UsersList__2DBJY\",\"Image\":\"sendmessage-form_Image__2pB_p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MessageFormContent\":\"message-list-form_MessageFormContent__3nOyM\"};"],"sourceRoot":""}